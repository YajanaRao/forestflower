-- Tooling modules: mason, dap-ui, neotest, mini.nvim (subset), symbols-outline
local util = require("forestflower.util")
return function(theme, options)
  local palette, ui = theme.palette, theme.ui
  local function syntax_entry(fg, bg, stylings)
    local h = { fg = fg, bg = bg }
    if stylings then for _, s in ipairs(stylings) do h[s] = true end end
    return h
  end
  local styles = { bold = "bold", italic = "italic" }
  local t = {
    -- mason
    MasonHeader = syntax_entry(palette.background, palette.success, { styles.bold }),
    MasonHeaderSecondary = syntax_entry(palette.background, palette.warning, { styles.bold }),
    MasonHighlight = { link = "Green" },
    MasonHighlightSecondary = { link = "Yellow" },
    MasonHighlightBlock = syntax_entry(palette.background, palette.secondary),
    MasonHighlightBlockBold = syntax_entry(palette.background, palette.secondary, { styles.bold }),
    MasonHighlightBlockSecondary = syntax_entry(palette.background, palette.warning),
    MasonHighlightBlockBoldSecondary = syntax_entry(palette.background, palette.warning, { styles.bold }),
    MasonMuted = syntax_entry(palette.outline_variant, palette.none),
    MasonMutedBlock = syntax_entry(palette.background, palette.outline_variant),
    -- dap-ui
    DapUIModifiedValue = syntax_entry(palette.info, palette.none, { styles.bold }),
    DapUIBreakpointsCurrentLine = syntax_entry(palette.info, palette.none, { styles.bold }),
    DapUIPlayPause = syntax_entry(palette.success, palette.surface_variant),
    DapUIRestart = syntax_entry(palette.success, palette.surface_variant),
    DapUIStop = syntax_entry(palette.error, palette.surface_variant),
    DapUIUnavailable = syntax_entry(palette.on_surface_variant, palette.surface_variant),
    DapUIStepOver = syntax_entry(palette.info, palette.surface_variant),
    DapUIStepInto = syntax_entry(palette.info, palette.surface_variant),
    DapUIStepBack = syntax_entry(palette.info, palette.surface_variant),
    DapUIStepOut = syntax_entry(palette.info, palette.surface_variant),
    DapUIScope = { link = "Blue" },
    DapUIType = { link = "Purple" },
    DapUIDecoration = { link = "Blue" },
    DapUIThread = { link = "Green" },
    DapUIStoppedThread = { link = "Blue" },
    DapUISource = { link = "Purple" },
    DapUILineNumber = { link = "Blue" },
    DapUIFloatBorder = { link = "Blue" },
    DapUIWatchesEmpty = { link = "Red" },
    DapUIWatchesValue = { link = "Green" },
    DapUIWatchesError = { link = "Red" },
    DapUIBreakpointsPath = { link = "Blue" },
    DapUIBreakpointsInfo = { link = "Green" },
    -- neotest
    NeotestPassed = { link = "GreenSign" },
    NeotestRunning = { link = "YellowSign" },
    NeotestFailed = { link = "RedSign" },
    NeotestSkipped = { link = "BlueSign" },
    NeotestNamespace = { link = "Purple" },
    NeotestFocused = syntax_entry(palette.warning, palette.none),
    NeotestFile = { link = "Aqua" },
    NeotestDir = { link = "Directory" },
    NeotestBorder = syntax_entry(palette.info, palette.none),
    NeotestIndent = { link = "NonText" },
    NeotestExpandMarker = syntax_entry(palette.bg5, palette.none),
    NeotestAdapterName = { link = "Title" },
    NeotestWinSelect = syntax_entry(palette.info, palette.none),
    NeotestMarked = { link = "Orange" },
    NeotestTarget = { link = "Red" },
    -- symbols-outline
    FocusedSymbol = { link = "NormalFloat" },
    -- mini.nvim subset (leave rest maybe in separate future module)
    MiniAnimateCursor = syntax_entry(palette.none, palette.none, { "reverse", "nocombine" }),
    MiniFilesFile = syntax_entry(palette.on_surface, palette.none),
    MiniFilesTitleFocused = syntax_entry(
      palette.success,
      options.float_style == "dim" and palette.background or palette.surface_variant,
      { styles.bold }
    ),
    MiniHipatternsFixme = syntax_entry(palette.background, palette.error, { styles.bold }),
    MiniHipatternsHack = syntax_entry(palette.background, palette.warning, { styles.bold }),
    MiniHipatternsNote = syntax_entry(palette.background, palette.info, { styles.bold }),
    MiniHipatternsTodo = syntax_entry(palette.background, palette.success, { styles.bold }),
    MiniIconsAzure = syntax_entry(palette.info, palette.none),
    MiniIconsBlue = syntax_entry(palette.info, palette.none),
    MiniIconsCyan = syntax_entry(palette.secondary, palette.none),
    MiniIconsGreen = syntax_entry(palette.success, palette.none),
    MiniIconsGrey = syntax_entry(palette.on_surface_variant, palette.none),
    MiniIconsOrange = syntax_entry(palette.warning, palette.none),
    MiniIconsPurple = syntax_entry(palette.tertiary, palette.none),
    MiniIconsRed = syntax_entry(palette.error, palette.none),
    MiniIconsYellow = syntax_entry(palette.warning, palette.none),
    MiniIndentscopePrefix = syntax_entry(palette.none, palette.none, { "nocombine" }),
    MiniJump2dSpot = syntax_entry(palette.warning, palette.none, { styles.bold, "nocombine" }),
    MiniJump2dSpotAhead = syntax_entry(palette.secondary, palette.none, { "nocombine" }),
    MiniJump2dSpotUnique = syntax_entry(palette.warning, palette.none, { styles.bold, "nocombine" }),
    MiniPickPrompt = syntax_entry(
      palette.info,
      options.float_style == "dim" and palette.background or palette.surface_variant
    ),
    MiniStarterFooter = { link = "Orange" },
    MiniStarterHeader = { link = "Yellow" },
    MiniStarterInactive = { link = "Comment" },
    MiniStarterItem = { link = "Normal" },
    MiniStarterItemBullet = { link = "Grey" },
    MiniStarterItemPrefix = { link = "Yellow" },
    MiniStarterQuery = { link = "Blue" },
    MiniStarterSection = { link = "Title" },
    MiniStatuslineDevinfo = syntax_entry(palette.on_surface_variant, palette.surface),
    MiniStatuslineFilename = syntax_entry(palette.on_surface_variant, palette.surface),
    MiniStatuslineModeCommand = syntax_entry(palette.background, palette.secondary, { styles.bold }),
    MiniStatuslineModeInsert = syntax_entry(palette.background, palette.secondary, { styles.bold }),
    MiniStatuslineModeNormal = syntax_entry(palette.background, palette.primary, { styles.bold }),
    MiniStatuslineModeOther = syntax_entry(palette.background, palette.tertiary, { styles.bold }),
    MiniStatuslineModeReplace = syntax_entry(palette.background, palette.warning, { styles.bold }),
    MiniStatuslineModeVisual = syntax_entry(palette.background, palette.tertiary, { styles.bold }),
    MiniTablineCurrent = syntax_entry(palette.success, palette.background, { styles.bold }),
    MiniTablineHidden = syntax_entry(palette.on_surface_variant, palette.surface_variant),
    MiniTablineModifiedCurrent = syntax_entry(palette.surface, palette.success),
    MiniTablineModifiedHidden = syntax_entry(palette.warning, palette.surface_variant),
    MiniTablineModifiedVisible = syntax_entry(palette.warning, palette.surface_variant),
    MiniTablineTabpagesection = syntax_entry(palette.background, palette.primary, { styles.bold }),
    MiniTablineVisible = syntax_entry(palette.on_surface, palette.surface_variant),
    MiniTestEmphasis = syntax_entry(palette.none, palette.none, { styles.bold }),
    MiniTestFail = syntax_entry(palette.error, palette.none, { styles.bold }),
    MiniTestPass = syntax_entry(palette.success, palette.none, { styles.bold }),
    MiniTrailspace = syntax_entry(palette.none, palette.error),
  }
  return t
end